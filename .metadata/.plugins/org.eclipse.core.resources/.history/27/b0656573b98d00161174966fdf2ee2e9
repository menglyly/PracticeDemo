package com.microshiny.zhangbao.util;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.microshiny.zhangbao.MyApplication;
import com.microshiny.zhangbao.R.string;
//import com.microshiny.zhangbao.json.resp.business.GetAssetFlowListResp;
import com.microshiny.zhangbao.view.BasePasswordPayDialog;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.os.Handler;
import android.text.TextUtils;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Toast;

public class VerifyUtils {

	private static final String NUMERIC_REGEX = "[0-9]+$";
	private static final String LETTER_REGEX = "[A-Za-z]+$";
	private static final String NUMERIC_AND_LETTER_REGEX = "[A-Za-z0-9]+$";
	private static final String MOBILE_NUMBER_REGEX = "^((134|135|136|137|138|139|147|150|151|152|157|158|159|178|182|183|184|187|188)||(130|131|132|145|155|156|176|185|186)||(133|153|177|180|181|189)||(170))\\d{8}$";

	private static  String newPwd; // 首次输入的密码
	private static  String confirmPwd; // 再次确认的密码
	
	private static GetPassword pwd;
	/**
	 * 用户名验证: 6-16位数字或字母
	 */
	public static boolean userNameVerify(Context context, String userName) {

		if (!TextUtils.isEmpty(userName)) {
			if (!(userName.length() < 6)) {
				if (!(userName.length() > 16)) {

					if (isMatch(userName, NUMERIC_REGEX) || isMatch(userName, LETTER_REGEX) || isMatch(userName, NUMERIC_AND_LETTER_REGEX)) {
						return true;
					} else {
						Toast.makeText(context, "用户名输入不合法!", Toast.LENGTH_SHORT).show();
					}

				} else {
					Toast.makeText(context, "用户名太长", Toast.LENGTH_SHORT).show();
				}
			} else {
				Toast.makeText(context, "用户名太短", Toast.LENGTH_SHORT).show();
			}
		} else {
			Toast.makeText(context, "用户名不能为空", Toast.LENGTH_SHORT).show();
		}

		return false;
	}

	/**
	 * 密码验证: 6-16位数字或字母
	 */
	public static boolean passwordVerify(Context context, String password) {

		if (!TextUtils.isEmpty(password)) {
			if (!(password.length() < 6)) {
				if (!(password.length() > 16) || password.length() == 32) {

					if (isMatch(password, NUMERIC_REGEX) || isMatch(password, LETTER_REGEX) || isMatch(password, NUMERIC_AND_LETTER_REGEX)) {
						return true;
					} else {
						Toast.makeText(context, "密码只能使用字母和数字!", Toast.LENGTH_SHORT).show();
					}

				} else {
					Toast.makeText(context, "密码太长", Toast.LENGTH_SHORT).show();
				}
			} else {
				Toast.makeText(context, "密码太短", Toast.LENGTH_SHORT).show();
			}
		} else {
			Toast.makeText(context, "密码不能为空", Toast.LENGTH_SHORT).show();
		}

		return false;
	}

	/**
	 * 验证手机号: 不能为空,11位数字,13、15、18开头
	 */
	public static boolean mobileVerify(Context context, String mobile) {
		if (!TextUtils.isEmpty(mobile)) {
			if (isMatch(mobile, MOBILE_NUMBER_REGEX)) {
				return true;
			} else {
				Toast.makeText(context, "请输入有效手机号码!", Toast.LENGTH_SHORT).show();
			}
		} else {
			Toast.makeText(context, "手机号不能为空", Toast.LENGTH_SHORT).show();
		}
		return false;
	}
	
	public static boolean mobileVerify(String mobile) {
		if (!TextUtils.isEmpty(mobile)) {
			if (isMatch(mobile, MOBILE_NUMBER_REGEX)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 判断字符串是否匹配正则表达式
	 */
	public static boolean isMatch(String str, String regEx) {
		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(str);
		return m.matches();
	}

	/**
	 * 是否含有中文或非Ascii码之外的字符
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isAsciiCharacter(Context context, String str) {
		boolean b = false;
		str = "124-.f,s*a?6答";
		for (int i = 0; i < str.length(); i++) {
			b = Pattern.matches("\\p{ASCII}+", ("" + str.charAt(i)));
			// if(b) {i=password.length();}
		}
		if (b) {
			return true;
		} else {
			Toast.makeText(context, "密码中含有非法字符!", Toast.LENGTH_SHORT).show();
		}

		return false;
	}

	/**
     * 首次输入密码
     */
	public static void showSetWalletPwd(final Activity mContext,final GetPassword pwd) {
		final BasePasswordPayDialog pwdDialog = new BasePasswordPayDialog(mContext);
		pwdDialog.setMaxLength_text(6).setText_text("首次使用请设置钱包密码", true).setMoney_text(0.0, false).show();
		openKeyboard(mContext);

		pwdDialog.setOnDismissListener(new OnDismissListener() {
			@Override
			public void onDismiss(DialogInterface dialog) {
				newPwd = pwdDialog.getPassword();
				LogUtils.e("TAG", "pwd======" + pwdDialog.getPassword());
				if (!TextUtils.isEmpty(newPwd) && newPwd.length() == 6) {
					showSetWalletPwd2(mContext,pwd);
				}

			}
		});
	}

	/**
	 * 确认密码
	 * @param mContext
	 */
	private static void showSetWalletPwd2(final Activity mContext,final GetPassword pwd){
		final BasePasswordPayDialog confirmPwdDialog = new BasePasswordPayDialog(mContext);
		confirmPwdDialog.setMaxLength_text(6).setText_text("再次输入确认钱包密码", true).setMoney_text(0.0, false).show();
		openKeyboard(mContext);

		confirmPwdDialog.setOnDismissListener(new OnDismissListener() {
			@Override
			public void onDismiss(DialogInterface dialog) {
				confirmPwd = confirmPwdDialog.getPassword();
				LogUtils.e("TAG", "confirm pwd======" + confirmPwdDialog.getPassword());
				if (newPwd.equals(confirmPwd)) {
					pwd.getpwd(confirmPwd);
				} else {
					Toast.makeText(mContext, "两次输入密码不一致", Toast.LENGTH_SHORT).show();
				}
			}
		});
	}
	
	/**
	 * 调用键盘
	 * @param mContext
	 */
	private static void openKeyboard(final Activity mContext) {

		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				InputMethodManager imm = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE);
				imm.toggleSoftInput(0, InputMethodManager.HIDE_NOT_ALWAYS);
				mContext.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
			}
		}, 600);
	}
	
	public  interface GetPassword{
		public void getpwd(String password);
	}

}
